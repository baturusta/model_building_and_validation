# Load project data and libraries
setwd("C:/Users/08892/Desktop/Model Building and Validation/Project")
# Load project data and libraries
library(readxl)
library(tidyverse)
library(forcats)
library(missForest)
library(gbm)
library(corrplot)
library(caret)
library(leaps)
library(FactoMineR)
library(factoextra)
library(randomForest)
library(e1071)
library(dummies)
library(dplyr)
library(tidyr)
train_data<-read.csv("Train_New_Data.csv", sep=";")
test_data<-read.csv("Test_New_Data.csv", sep=";")

# Drop categoric columns with non matching variables that will be one hot encoded
train_data <- train_data %>% select(-c("RoofStyle", "Exterior1st", "Exterior2nd", "Electrical"))
#Exploration on Numerical Variables
num_values <- select_if(train_data, is.numeric)
numericVarNames <- names(num_values)

summary(num_values)

# There are not many NaN's, we will fill them with an automatized function
contains_na<-names(num_values)[sapply(num_values, anyNA)]

# Nulls in Garage year built column probably represents houses with no garage
subset(num_values, is.na(num_values$GarageYrBlt))[c("GarageCars", "GarageYrBlt", "GarageArea")]
# Our suspicions were correct, we should fill it with zeroes for now
num_values <-
  num_values %>% mutate(GarageYrBlt=replace_na(GarageYrBlt, 0))
# Apply different functions to fill Na's
# https://www.analyticsvidhya.com/blog/2016/03/tutorial-powerful-packages-imputing-missing-values
# Fill with Amelia package:
# Amelia package assumes multivariate normal distribution, let's check for it before applying
# https://cran.r-project.org/web/packages/MVN/vignettes/MVN.pdf
library(MVN)
tests <- c("hz", "royston", "dh")
for(test in tests){
  print(paste("Test: ",test))
  print(mvn(num_values, mvnTest=test)$multivariateNormality$MVN)
}
# There is no MVN, therefore we will use missforest package to fill the missing values
# Fill with missForest
# https://cran.r-project.org/web/packages/missForest/missForest.pdf
library(missForest)
num_values <- missForest(num_values, maxiter=10, ntree=200)$ximp

# The few nulls among the numerical values are replaced with missForest package, we can proceed to EDA
# Detailed summary
options(scipen=999)
num_describe<-mvn(num_values)$Descriptives
# We see some heavily skewed variables and high kurtosis. A lot of features have high number of 0's and some high values
# feeding the data into a model this way will cause it to perform poorly, a scaling seems to be in order
# as both MVN test and descriptive statistics point out, the data is not normally distributed at all, 
# therefore it might be better to scale with something other than standard scaling, or maybe standard scaling after a log transformation 
# But before that, we should proceed to see relationships between variables

# Correlation plot
cor <- cor(num_values,use="pairwise.complete.obs")
cor_sorted <- as.matrix(sort(cor[,'SalePrice'], decreasing = TRUE))
CorHigh <- names(which(apply(cor_sorted, 1, function(x) abs(x)>0.3)))
cor <- cor[CorHigh, CorHigh]
windows()
corrplot.mixed(cor, tl.col="black", tl.pos = "lt")

# some of the variables are heavily correlated, we will either eliminate some of them, transform them or combine them into new variables.
# Here is a breakdown:
# - Overall Quality is highly and positively correlated with sales price. This could introduce a bias
# - GarageArea and GarageCars have a correlation of almost one, they represent pretty much the same thing, but keeping the garage area variable 
# is arguably better
# - Above ground living area (GrLivArea) is related to number of total rooms (TotRmsAbvGrd) and 2nd floor square feet (X2ndFlrSF), the correlation
# is higher with 2nd floor area
# - Another high correlation is found between total basement area (TotalBsmtSF) and first floor area (X1stFlrSF)


hist(num_values$YrSold-num_values$YearRemodAdd)
# Introduce renovation variable that indicates how long ago the house was remodeled
num_values<-num_values %>%
  mutate(renovation = ifelse(YearBuilt!=YearRemodAdd, (YrSold-YearRemodAdd), -1)) %>%
  mutate(renovation = case_when(renovation==-1~0,
                                renovation<10~3,
                                renovation<=40~2,
                                renovation>40~1)) %>%
  select(-YearRemodAdd)

# Renovation:
# 0 : not renovated
# 1 : renovated over 40 years ago
# 2 : renovated between 40 years and 10 years ago
# 3 : renovated less than 10 years ago

# Create total bath variable
num_values$bath <- num_values$FullBath + (0.5 * num_values$HalfBath) + num_values$BsmtFullBath + (0.5 * num_values$BsmtHalfBath)

# A couple scatterplots
ggplot(num_values, aes(LotArea, SalePrice)) +
  geom_point(color="blue")
ggplot(num_values, aes(GrLivArea, SalePrice)) +
  geom_point(color="blue")
ggplot(num_values, aes(YearBuilt, SalePrice)) +
  geom_point(color="blue")
ggplot(num_values, aes(TotalBsmtSF, SalePrice)) +
  geom_point(color="blue")

ggplot(num_values, aes(X3SsnPorch, SalePrice)) +
  geom_point(color="blue")

ggplot(num_values, aes(PoolArea, SalePrice)) +
  geom_point(color="blue")
# Drop 
num_values <- select(num_values, -c(GarageCars, OverallQual, GarageYrBlt, HalfBath, BsmtFullBath, FullBath, BsmtHalfBath))
num_values <- num_values %>% select(-Id)

# Categorised sales variable
summary(num_values$SalePrice)

# Merge square foot variables. Lot area is overall area that building resides on, masonry veneer is something like a wall so i did not add them to here

num_values <-
  num_values %>% mutate(totalsf = GarageArea + WoodDeckSF + OpenPorchSF + EnclosedPorch + X3SsnPorch +
                          ScreenPorch + PoolArea) %>% select(-c(GarageArea,WoodDeckSF,OpenPorchSF,EnclosedPorch,X3SsnPorch,
                                                                ScreenPorch,PoolArea))

# TotalBsmtSf is sum of BsmtFinSf1,BsmtFinSf2 and BsmtUnfSf. Drop these three and keep only one variable here.
num_values <- num_values %>% select(-c(BsmtFinSF1,BsmtFinSF2,BsmtUnfSF))

# - Another high correlation is found between total basement area (TotalBsmtSF) and first floor area (X1stFlrSF)
# It looks like first floor area is covering all total basement area plus some other variable. Dropping total basement area.
#num_values <- num_values %>% select(-c(TotalBsmtSF))

# Solve skewness issue by log transforming or dropping variables with skewness over 1. 
# Miscval, lowqualfinsf droppped no correlation with saleprice. Also log transform turns them into negative infinity!

num_values <- num_values %>% mutate(LotArea = log(LotArea)) %>% select(-c(MiscVal,LowQualFinSF))


# summary(log(num_values$SalePrice)) #Scale based on log
# Salesrange<-log(num_values$SalePrice)
# seq(min(Salesrange), max(Salesrange), length.out = 10)
# binneddata<-mutate(num_values, binned=Salesrange-Salesrange %% 0.34)$binned
# logrange<-sort(unique(binneddata))
# reals<-10^logrange
# # Range
# range<-case_when(binneddata==logrange[1]~"category1",
#                  binneddata==logrange[2]~"category1",
#                  binneddata==logrange[3]~"category1",
#                  binneddata==logrange[4]~"category2",
#                  binneddata==logrange[5]~"category3",
#                  binneddata==logrange[6]~"category4",
#                  binneddata==logrange[7]~"category5",
#                  binneddata==logrange[8]~"category6",
#                  binneddata==logrange[9]~"category7",
#                  binneddata==logrange[10]~"category7"
# )
# # Create 15 categories out of the salesprice range
# train_data$SalesRange <- range
# train_data %>% select(SalesRange) %>% group_by(SalesRange) %>% summarize(n()) %>%
#   ggplot(.) +
#   geom_bar(aes(y=`n()`, x=SalesRange), stat='identity')
# Explore categorical variables
cat_vars <- select_if(train_data, is.factor)

summary(cat_vars)

# Convert NaN's in categorical variables into "None"
cat_vars <- cat_vars %>% 
  mutate_if(is.factor, fct_explicit_na, na_level = 'None')

cat_vars <- cat_vars %>% mutate(Lot_Shape = case_when(LotShape == "IR3" ~ 1,
                                                      LotShape == "IR2" ~ 2,
                                                      LotShape == "IR1" ~ 3,
                                                      LotShape == "Reg" ~ 4)) %>%
  select(-LotShape)

cat_vars <- cat_vars %>% mutate(Land_Contour = case_when(LandContour == "Low" ~ 1,
                                                         LandContour == "HLS" ~ 2,
                                                         LandContour == "Bnk" ~ 3,
                                                         LandContour == "Lvl" ~ 4)) %>%
  select(-LandContour)

cat_vars <- cat_vars %>% mutate(Utility = case_when(Utilities == "ELO" ~ 1,
                                                    Utilities == "NoSeWa" ~ 2,
                                                    Utilities == "NoSewr" ~ 3,
                                                    Utilities == "AllPub" ~ 4)) %>%
  select(-Utilities)

cat_vars <- cat_vars %>% mutate(Land_Slope = case_when(LandSlope == "Sev" ~ 1,
                                                       LandSlope == "Mod" ~ 2,
                                                       LandSlope == "Gtl" ~ 3)) %>%
  select(-LandSlope)


cat_vars <-
  cat_vars %>% mutate(
    Exter_Qual = case_when(
      ExterQual == "Po" ~ 1,
      ExterQual == "Fa" ~ 2,
      ExterQual == "TA" ~ 3,
      ExterQual == "Gd" ~ 4,
      ExterQual == "Ex" ~ 5
    )
  ) %>%
  select(-ExterQual)


cat_vars <-
  cat_vars %>% mutate(
    Exter_Cond = case_when(
      ExterCond == "Po" ~ 1,
      ExterCond == "Fa" ~ 2,
      ExterCond == "TA" ~ 3,
      ExterCond == "Gd" ~ 4,
      ExterCond == "Ex" ~ 5
    )
  ) %>%
  select(-ExterCond)

cat_vars <-
  cat_vars %>% mutate(
    Bsmt_Qual = case_when(
      BsmtQual == "None" ~ 0,
      BsmtQual == "Po" ~ 1,
      BsmtQual == "Fa" ~ 2,
      BsmtQual == "TA" ~ 3,
      BsmtQual == "Gd" ~ 4,
      BsmtQual == "Ex" ~ 5
    )
  ) %>%
  select(-BsmtQual)


cat_vars <-
  cat_vars %>% mutate(
    Bsmt_Cond = case_when(
      BsmtCond == "None" ~ 0,
      BsmtCond == "Po" ~ 1,
      BsmtCond == "Fa" ~ 2,
      BsmtCond == "TA" ~ 3,
      BsmtCond == "Gd" ~ 4,
      BsmtCond == "Ex" ~ 5
    )
  ) %>%
  select(-BsmtCond)

cat_vars <-
  cat_vars %>% mutate(
    Bsmt_Exposure = case_when(
      BsmtExposure == "None" ~ 0,
      BsmtExposure == "No" ~ 1,
      BsmtExposure == "Mn" ~ 2,
      BsmtExposure == "Av" ~ 3,
      BsmtExposure == "Gd" ~ 4
    )
  ) %>%
  select(-BsmtExposure)

cat_vars <-
  cat_vars %>% mutate(
    Bsmt_FinType1 = case_when(
      BsmtFinType1 == "None" ~ 0,
      BsmtFinType1 == "Unf" ~ 1,
      BsmtFinType1 == "LwQ" ~ 2,
      BsmtFinType1 == "Rec" ~ 3,
      BsmtFinType1 == "BLQ" ~ 4,
      BsmtFinType1 == "ALQ" ~ 5,
      BsmtFinType1 == "GLQ" ~ 6
    )
  ) %>%
  select(-BsmtFinType1)

cat_vars <-
  cat_vars %>% mutate(
    Bsmt_FinType2 = case_when(
      BsmtFinType2 == "None" ~ 0,
      BsmtFinType2 == "Unf" ~ 1,
      BsmtFinType2 == "LwQ" ~ 2,
      BsmtFinType2 == "Rec" ~ 3,
      BsmtFinType2 == "BLQ" ~ 4,
      BsmtFinType2 == "ALQ" ~ 5,
      BsmtFinType2 == "GLQ" ~ 6
    )
  ) %>%
  select(-BsmtFinType2)

cat_vars <-
  cat_vars %>% mutate(
    Heating_QC = case_when(
      HeatingQC == "None" ~ 0,
      HeatingQC == "Po" ~ 1,
      HeatingQC == "Fa" ~ 2,
      HeatingQC == "TA" ~ 3,
      HeatingQC == "Gd" ~ 4,
      HeatingQC == "Ex" ~ 5
    )
  ) %>%
  select(-HeatingQC)

cat_vars <-
  cat_vars %>% mutate(
    Central_Air = case_when(
      CentralAir == "N" ~ 0,
      CentralAir == "Y" ~ 1
    )
  ) %>%
  select(-CentralAir)


cat_vars <-
  cat_vars %>% mutate(
    Kitchen_Qual = case_when(
      KitchenQual == "None" ~ 0,
      KitchenQual == "Po" ~ 1,
      KitchenQual == "Fa" ~ 2,
      KitchenQual == "TA" ~ 3,
      KitchenQual == "Gd" ~ 4,
      KitchenQual == "Ex" ~ 5
    )
  ) %>%
  select(-KitchenQual)

cat_vars <-
  cat_vars %>% mutate(
    Func = case_when(
      Functional == "Sal" ~ 0,
      Functional == "Sev" ~ 1,
      Functional == "Maj2" ~ 2,
      Functional == "Maj1" ~ 3,
      Functional == "Mod" ~ 4,
      Functional == "Min2" ~ 5,
      Functional == "Min1" ~ 6,
      Functional == "Typ" ~ 7,
    )
  ) %>%
  select(-Functional)

cat_vars <-
  cat_vars %>% mutate(
    Fireplace_Qu = case_when(
      FireplaceQu == "None" ~ 0,
      FireplaceQu == "Po" ~ 1,
      FireplaceQu == "Fa" ~ 2,
      FireplaceQu == "TA" ~ 3,
      FireplaceQu == "Gd" ~ 4,
      FireplaceQu == "Ex" ~ 5
    )
  ) %>%
  select(-FireplaceQu)

cat_vars <-
  cat_vars %>% mutate(
    Garage_Finish = case_when(
      GarageFinish == "None" ~ 0,
      GarageFinish == "Unf" ~ 1,
      GarageFinish == "RFn" ~ 2,
      GarageFinish == "Fin" ~ 3)
  ) %>%
  select(-GarageFinish)


cat_vars <-
  cat_vars %>% mutate(
    Garage_Quality = case_when(
      GarageQual == "None" ~ 0,
      GarageQual == "Po" ~ 1,
      GarageQual == "Fa" ~ 2,
      GarageQual == "TA" ~ 3,
      GarageQual == "Gd" ~ 4,
      GarageQual == "Ex" ~ 5
    )
  ) %>%
  select(-GarageQual)

cat_vars <-
  cat_vars %>% mutate(
    Garage_Cond = case_when(
      GarageCond == "None" ~ 0,
      GarageCond == "Po" ~ 1,
      GarageCond == "Fa" ~ 2,
      GarageCond == "TA" ~ 3,
      GarageCond == "Gd" ~ 4,
      GarageCond == "Ex" ~ 5
    )
  ) %>%
  select(-GarageCond)

cat_vars <-
  cat_vars %>% mutate(
    Paved_Drive = case_when(
      PavedDrive == "N" ~ 0,
      PavedDrive == "P" ~ 1,
      PavedDrive == "Y" ~ 2)
  ) %>%
  select(-PavedDrive)

cat_vars <-
  cat_vars %>% mutate(
    Pool_Qual = case_when(
      PoolQC == "None" ~ 0,
      PoolQC == "Po" ~ 1,
      PoolQC == "Fa" ~ 2,
      PoolQC == "TA" ~ 3,
      PoolQC == "Gd" ~ 4,
      PoolQC == "Ex" ~ 5
    )
  ) %>%
  select(-PoolQC)

cat_vars <-
  cat_vars %>% mutate(
    Fence_ = case_when(
      Fence == "None" ~ 0,
      Fence == "MnWw" ~ 1,
      Fence == "GdWo" ~ 2,
      Fence == "MnPrv" ~ 3,
      Fence == "GdPrv" ~ 4)
  ) %>%
  select(-Fence)


# Remove near zero variance categorics
zerovars<-(nearZeroVar(select_if(cat_vars, is.factor), freqCut=95/5, names=T))
cat_vars <- cat_vars %>% select(-zerovars)

# # Same for ordinals.
# zerovars<-(nearZeroVar(select_if(cat_vars, is.numeric), freqCut=95/5, names=T))
# cat_vars <- cat_vars %>% select(-zerovars)


#Select ordinals
ordinals<-select_if(cat_vars, is.numeric)

# One-hot encode the rest
encoded_cats <- as.data.frame(model.matrix(~.+0,data = select_if(cat_vars, is.factor)))

# # Drop also one hot encoded ones
# zerovars<-(nearZeroVar(encoded_cats, freqCut=95/5, names=T))
# encoded_cats <- encoded_cats %>% select(-zerovars)

# Combine for classification
class_df <- cbind(ordinals, num_values, encoded_cats, train_data$SalesRange)

class_df <- cbind(ordinals, num_values, encoded_cats, train_data$SalePrice)

class_df <- class_df %>% rename(SalesRange=`train_data$SalesRange`)

class_df<-class_df%>%select(-SalePrice)
####
# PREP TEST DATAFRAME
####
# Drop categoric columns with non matching variables that will be one hot encoded
test_data <- test_data %>% select(-c("RoofStyle", "Exterior1st", "Exterior2nd", "Electrical"))
# Numerical columns
test_numerical<-select_if(test_data, is.numeric)
# Categorical columns
test_categorical<-select_if(test_data, is.factor)
# Transformation on numericals
test_numerical <-
  test_numerical %>% mutate(GarageYrBlt=replace_na(GarageYrBlt, 0))
test_numerical <- missForest(test_numerical, maxiter=10, ntree=200)$ximp
test_numerical<-test_numerical %>%
  mutate(renovation = ifelse(YearBuilt!=YearRemodAdd, (YrSold-YearRemodAdd), -1)) %>%
  mutate(renovation = case_when(renovation==-1~0,
                                renovation<10~3,
                                renovation<=40~2,
                                renovation>40~1)) %>%
  select(-YearRemodAdd)
test_numerical$bath <- test_numerical$FullBath + (0.5 * test_numerical$HalfBath) + test_numerical$BsmtFullBath + (0.5 * test_numerical$BsmtHalfBath)
test_numerical <- select(test_numerical, -c(GarageCars, OverallQual, GarageYrBlt, HalfBath, BsmtFullBath, FullBath, BsmtHalfBath))
test_numerical <- test_numerical %>% select(-Id)

## Efehan's update
# Merge square foot variables. Lot area is overall area that building resides on, masonry veneer is something like a wall so i did not add them to here

test_numerical <-
  test_numerical %>% mutate(totalsf = GarageArea + WoodDeckSF + OpenPorchSF + EnclosedPorch + X3SsnPorch +
                              ScreenPorch + PoolArea) %>% select(-c(GarageArea,WoodDeckSF,OpenPorchSF,EnclosedPorch,X3SsnPorch,
                                                                    ScreenPorch,PoolArea))

# TotalBsmtSf is sum of BsmtFinSf1,BsmtFinSf2 and BsmtUnfSf. Drop these three and keep only one variable here.
test_numerical <- test_numerical %>% select(-c(BsmtFinSF1,BsmtFinSF2,BsmtUnfSF))

# - Another high correlation is found between total basement area (TotalBsmtSF) and first floor area (X1stFlrSF)
# It looks like first floor area is covering all total basement area plus some other variable. Dropping total basement area.
#test_numerical <- test_numerical %>% select(-c(TotalBsmtSF))

# Solve skewness issue by log transforming or dropping variables with skewness over 1. 
# Miscval, lowqualfinsf droppped no correlation with saleprice. Also log transform turns them into negative infinity!

test_numerical <- test_numerical %>% mutate(LotArea = log(LotArea)) %>% select(-c(MiscVal,LowQualFinSF))


# log_testSales <- log(test_numerical$SalePrice)
# test_targetbins <- mutate(test_numerical, binned=log_testSales-log_testSales %% 0.34)$binned
# test_range<-case_when(test_targetbins==logrange[1]~"category1",
#                       test_targetbins==logrange[2]~"category1",
#                       test_targetbins==logrange[3]~"category1",
#                       test_targetbins==logrange[4]~"category2",
#                       test_targetbins==logrange[5]~"category3",
#                       test_targetbins==logrange[6]~"category4",
#                       test_targetbins==logrange[7]~"category5",
#                       test_targetbins==logrange[8]~"category6",
#                       test_targetbins==logrange[9]~"category7",
#                       test_targetbins==logrange[10]~"category7"
# )
# test_data$SalesRange <- test_range

test_categorical <- test_categorical %>% 
  mutate_if(is.factor, fct_explicit_na, na_level = 'None')

test_categorical <- test_categorical %>% mutate(Lot_Shape = case_when(LotShape == "IR3" ~ 1,
                                                                      LotShape == "IR2" ~ 2,
                                                                      LotShape == "IR1" ~ 3,
                                                                      LotShape == "Reg" ~ 4)) %>%
  select(-LotShape)

test_categorical <- test_categorical %>% mutate(Land_Contour = case_when(LandContour == "Low" ~ 1,
                                                                         LandContour == "HLS" ~ 2,
                                                                         LandContour == "Bnk" ~ 3,
                                                                         LandContour == "Lvl" ~ 4)) %>%
  select(-LandContour)

test_categorical <- test_categorical %>% mutate(Utility = case_when(Utilities == "ELO" ~ 1,
                                                                    Utilities == "NoSeWa" ~ 2,
                                                                    Utilities == "NoSewr" ~ 3,
                                                                    Utilities == "AllPub" ~ 4)) %>%
  select(-Utilities)

test_categorical <- test_categorical %>% mutate(Land_Slope = case_when(LandSlope == "Sev" ~ 1,
                                                                       LandSlope == "Mod" ~ 2,
                                                                       LandSlope == "Gtl" ~ 3)) %>%
  select(-LandSlope)


test_categorical <-
  test_categorical %>% mutate(
    Exter_Qual = case_when(
      ExterQual == "Po" ~ 1,
      ExterQual == "Fa" ~ 2,
      ExterQual == "TA" ~ 3,
      ExterQual == "Gd" ~ 4,
      ExterQual == "Ex" ~ 5
    )
  ) %>%
  select(-ExterQual)


test_categorical <-
  test_categorical %>% mutate(
    Exter_Cond = case_when(
      ExterCond == "Po" ~ 1,
      ExterCond == "Fa" ~ 2,
      ExterCond == "TA" ~ 3,
      ExterCond == "Gd" ~ 4,
      ExterCond == "Ex" ~ 5
    )
  ) %>%
  select(-ExterCond)

test_categorical <-
  test_categorical %>% mutate(
    Bsmt_Qual = case_when(
      BsmtQual == "None" ~ 0,
      BsmtQual == "Po" ~ 1,
      BsmtQual == "Fa" ~ 2,
      BsmtQual == "TA" ~ 3,
      BsmtQual == "Gd" ~ 4,
      BsmtQual == "Ex" ~ 5
    )
  ) %>%
  select(-BsmtQual)


test_categorical <-
  test_categorical %>% mutate(
    Bsmt_Cond = case_when(
      BsmtCond == "None" ~ 0,
      BsmtCond == "Po" ~ 1,
      BsmtCond == "Fa" ~ 2,
      BsmtCond == "TA" ~ 3,
      BsmtCond == "Gd" ~ 4,
      BsmtCond == "Ex" ~ 5
    )
  ) %>%
  select(-BsmtCond)

test_categorical <-
  test_categorical %>% mutate(
    Bsmt_Exposure = case_when(
      BsmtExposure == "None" ~ 0,
      BsmtExposure == "No" ~ 1,
      BsmtExposure == "Mn" ~ 2,
      BsmtExposure == "Av" ~ 3,
      BsmtExposure == "Gd" ~ 4
    )
  ) %>%
  select(-BsmtExposure)

test_categorical <-
  test_categorical %>% mutate(
    Bsmt_FinType1 = case_when(
      BsmtFinType1 == "None" ~ 0,
      BsmtFinType1 == "Unf" ~ 1,
      BsmtFinType1 == "LwQ" ~ 2,
      BsmtFinType1 == "Rec" ~ 3,
      BsmtFinType1 == "BLQ" ~ 4,
      BsmtFinType1 == "ALQ" ~ 5,
      BsmtFinType1 == "GLQ" ~ 6
    )
  ) %>%
  select(-BsmtFinType1)

test_categorical <-
  test_categorical %>% mutate(
    Bsmt_FinType2 = case_when(
      BsmtFinType2 == "None" ~ 0,
      BsmtFinType2 == "Unf" ~ 1,
      BsmtFinType2 == "LwQ" ~ 2,
      BsmtFinType2 == "Rec" ~ 3,
      BsmtFinType2 == "BLQ" ~ 4,
      BsmtFinType2 == "ALQ" ~ 5,
      BsmtFinType2 == "GLQ" ~ 6
    )
  ) %>%
  select(-BsmtFinType2)

test_categorical <-
  test_categorical %>% mutate(
    Heating_QC = case_when(
      HeatingQC == "None" ~ 0,
      HeatingQC == "Po" ~ 1,
      HeatingQC == "Fa" ~ 2,
      HeatingQC == "TA" ~ 3,
      HeatingQC == "Gd" ~ 4,
      HeatingQC == "Ex" ~ 5
    )
  ) %>%
  select(-HeatingQC)

test_categorical <-
  test_categorical %>% mutate(
    Central_Air = case_when(
      CentralAir == "N" ~ 0,
      CentralAir == "Y" ~ 1
    )
  ) %>%
  select(-CentralAir)


test_categorical <-
  test_categorical %>% mutate(
    Kitchen_Qual = case_when(
      KitchenQual == "None" ~ 0,
      KitchenQual == "Po" ~ 1,
      KitchenQual == "Fa" ~ 2,
      KitchenQual == "TA" ~ 3,
      KitchenQual == "Gd" ~ 4,
      KitchenQual == "Ex" ~ 5
    )
  ) %>%
  select(-KitchenQual)

test_categorical <-
  test_categorical %>% mutate(
    Func = case_when(
      Functional == "Sal" ~ 0,
      Functional == "Sev" ~ 1,
      Functional == "Maj2" ~ 2,
      Functional == "Maj1" ~ 3,
      Functional == "Mod" ~ 4,
      Functional == "Min2" ~ 5,
      Functional == "Min1" ~ 6,
      Functional == "Typ" ~ 7,
    )
  ) %>%
  select(-Functional)

test_categorical <-
  test_categorical %>% mutate(
    Fireplace_Qu = case_when(
      FireplaceQu == "None" ~ 0,
      FireplaceQu == "Po" ~ 1,
      FireplaceQu == "Fa" ~ 2,
      FireplaceQu == "TA" ~ 3,
      FireplaceQu == "Gd" ~ 4,
      FireplaceQu == "Ex" ~ 5
    )
  ) %>%
  select(-FireplaceQu)

test_categorical <-
  test_categorical %>% mutate(
    Garage_Finish = case_when(
      GarageFinish == "None" ~ 0,
      GarageFinish == "Unf" ~ 1,
      GarageFinish == "RFn" ~ 2,
      GarageFinish == "Fin" ~ 3)
  ) %>%
  select(-GarageFinish)


test_categorical <-
  test_categorical %>% mutate(
    Garage_Quality = case_when(
      GarageQual == "None" ~ 0,
      GarageQual == "Po" ~ 1,
      GarageQual == "Fa" ~ 2,
      GarageQual == "TA" ~ 3,
      GarageQual == "Gd" ~ 4,
      GarageQual == "Ex" ~ 5
    )
  ) %>%
  select(-GarageQual)

test_categorical <-
  test_categorical %>% mutate(
    Garage_Cond = case_when(
      GarageCond == "None" ~ 0,
      GarageCond == "Po" ~ 1,
      GarageCond == "Fa" ~ 2,
      GarageCond == "TA" ~ 3,
      GarageCond == "Gd" ~ 4,
      GarageCond == "Ex" ~ 5
    )
  ) %>%
  select(-GarageCond)

test_categorical <-
  test_categorical %>% mutate(
    Paved_Drive = case_when(
      PavedDrive == "N" ~ 0,
      PavedDrive == "P" ~ 1,
      PavedDrive == "Y" ~ 2)
  ) %>%
  select(-PavedDrive)

test_categorical <-
  test_categorical %>% mutate(
    Pool_Qual = case_when(
      PoolQC == "None" ~ 0,
      PoolQC == "Po" ~ 1,
      PoolQC == "Fa" ~ 2,
      PoolQC == "TA" ~ 3,
      PoolQC == "Gd" ~ 4,
      PoolQC == "Ex" ~ 5
    )
  ) %>%
  select(-PoolQC)

test_categorical <-
  test_categorical %>% mutate(
    Fence_ = case_when(
      Fence == "None" ~ 0,
      Fence == "MnWw" ~ 1,
      Fence == "GdWo" ~ 2,
      Fence == "MnPrv" ~ 3,
      Fence == "GdPrv" ~ 4)
  ) %>%
  select(-Fence)

zerovars_t<-(nearZeroVar(select_if(test_categorical, is.factor), freqCut=95/5, names=T))
test_categorical <- test_categorical %>% select(-zerovars_t)

test_ordinals <- select_if(test_categorical, is.numeric)
test_encoded_cats <- as.data.frame(model.matrix(~.+0,data = select_if(test_categorical, is.factor)))

# # Same for ordinals.
# zerovars<-(nearZeroVar(test_ordinals, freqCut=95/5, names=T))
# test_ordinals <- test_ordinals %>% select(-zerovars)


# One-hot encode the rest
encoded_cats <- as.data.frame(model.matrix(~.+0,data = select_if(test_categorical, is.factor)))

# # Drop also one hot encoded ones
# zerovars<-(nearZeroVar(encoded_cats, freqCut=95/5, names=T))
# test_encoded_cats <- encoded_cats %>% select(-zerovars)

test_class_df <- cbind(test_ordinals, test_numerical, test_encoded_cats, test_data$SalePrice)

test_class_df <- cbind(test_ordinals, test_numerical, test_encoded_cats, test_data$SalesRange)
test_class_df <- test_class_df %>% rename(SalesRange=`test_data$SalesRange`)
test_class_df<-test_class_df%>%select(-SalePrice)

# Introduce missing columns
test_class_df$NeighborhoodBlueste <- rep(0, 461)
test_class_df$Condition1RRNe <- rep(0, 461)
test_class_df$SaleTypeCon <- rep(0, 461)
test_class_df$SaleTypeConLI <- rep(0, 461)
test_class_df$SaleConditionAdjLand <- rep(0, 461)
# fix colnam

class_df <- class_df %>% rename(MSZoningC =`MSZoningC (all)`)
test_class_df <- test_class_df %>% rename(MSZoningC =`MSZoningC (all)`)

### Drop non-existing columns in one of the frames. 

setdiff(class_df,test_class_df)
#class_df <- class_df %>% select(-c(SaleTypeCon,SaleConditionAdjLand,NeighborhoodBlueste,SaleTypeConLI,Condition1RRNe))


class_df$SalePrice <- class_df$`train_data$SalePrice`
test_class_df$SalePrice <- test_class_df$`test_data$SalePrice`
class_df <- class_df %>% select(-`train_data$SalePrice`)
test_class_df <- test_class_df %>% select(-'test_data$SalePrice')
### Remove outliers. R-squared'i arttırıyor ama biraz overfit ettiriyor.
mod <- lm(SalePrice ~ ., data=class_df)
car::outlierTest(mod)

class_df <- class_df[-c(524,692,899,804,441,186),]




#################################3
rf_sale=randomForest(SalePrice~.,data=class_df,
                     importance=TRUE, mtry=15,drop.unused.levels=TRUE)

yhat.rf = predict(rf_sale, newdata=test_class_df)
yhat.rf.tr = predict(rf_sale, newdata=class_df)

log(sqrt(mean((yhat.rf-test_class_df$SalePrice)^2)))

log(sqrt(mean((yhat.rf.tr-class_df$SalePrice)^2)))
#################################

set.seed(123)
hyper_grid <- expand.grid(
  n.trees = c(500,1000), shrinkage=c(0.01,0.1),interaction.depth = seq(1,10),n.minobsinnode=c(5,10,20))
metric <- "RMSE"
trainControl <- trainControl(method="cv", number=10)

gbm.caret <- train(SalePrice ~ ., data=class_df, distribution="gaussian", method="gbm",
                   trControl=trainControl, verbose=FALSE, 
                   tuneGrid=hyper_grid, metric=metric, bag.fraction=0.75)      

result <- gbm.caret$results
#28733.
arrange(result,RMSE)
log(28733)

hyper_grid <- expand.grid(
  n.trees = c(1000), shrinkage=c(0.01),interaction.depth = c(9),n.minobsinnode=c(20))
gbm.caret <- train(SalePrice ~ ., data=class_df, distribution="gaussian", method="gbm",
                   trControl=trainControl, verbose=FALSE, 
                   tuneGrid=hyper_grid, metric=metric, bag.fraction=0.75)
pred <- predict(gbm.caret, newdata = test_class_df)
predtr <- predict(gbm.caret, newdata = class_df)

sqrt(mean((log(predtr) - log(class_df$SalePrice)) ^ 2))
sqrt(mean((log(pred) - log(test_class_df$SalePrice)) ^ 2))

#### Randomforest
hyper_grid <- expand.grid(
  mtry = c(5,10)# number of trees
)

rf <- train(log(SalePrice) ~ ., data=class_df, distribution="gaussian", method="rf",
                   trControl=trainControl, verbose=FALSE, 
                   tuneGrid=hyper_grid, metric=metric)      

pred <- predict(rf, newdata = test_class_df)
predtr <- predict(rf, newdata = class_df)

sqrt(mean((predtr - log(class_df$SalePrice)) ^ 2))
sqrt(mean((pred - log(test_class_df$SalePrice)) ^ 2))



## Ridge

grid=10^seq(10,-2,length=100)
x <- as.matrix(features) # Remov)es class
y <- as.double(as.matrix(target)) # Only class
y_test <- as.matrix(select(test_class_df,-c(SalePrice)))

ridge_mod = cv.glmnet(x, y, alpha = 0, lambda = grid,nfolds=10)
lambda_cv <- ridge_mod$lambda.min
model_cv <- glmnet(x, y, alpha = 0, lambda = lambda_cv, standardize = TRUE)

ridge_pred = predict(model_cv,y_test)

sqrt(mean((ridge_pred - test_class_df$SalePrice)^2))

# Do benchmark classification with svc
library(e1071)
library(randomForest)
library(Metrics)
set.seed(15)
svmfit<-svm(SalesRange~., data=class_df, kernel="polynomial", cost=0.1, scale=FALSE)
test1<-predict(svmfit, test_class_df)
accuracy(test_data$SalesRange, test1)
set.seed(15)
rf.test<-randomForest(SalesRange~., data=class_df, ntrees=100)
train2<-predict(rf.test, class_df)
test2<-predict(rf.test, test_class_df)
accuracy(test_data$SalesRange, test2)
accuracy(train_data$SalesRange, train2)
#####################
setdiff(colnames(test_class_df), colnames(class_df))
setdiff(colnames(class_df), colnames(test_class_df))

# regression
rf.reg<-randomForest(SalePrice~.-SalesRange, data=class_df)

trainreg<-predict(rf.reg, class_df)
testreg<-predict(rf.reg, test_class_df)
rmse(train_data$SalePrice, trainreg)
rmse(test_data$SalePrice, testreg)

# Categoric columns that have different values from each other:
# RoofStyle      # Can drop, don't think it will help much
# Exterior1st    # Can drop, too many new values
# Exterior2nd    # Maybe create a new variable with both exteriors
# Electrical     # Can Drop
# Neighborhood   # This is necessary, need to find a way to derive
# Condition1     # May drop
# SaleType       # 
# SaleCondition  #


# https://www.sciencedirect.com/science/article/pii/S1051137712000228
# https://www.sciencedirect.com/science/article/pii/S0166046216301107
# https://www.apartmenttherapy.com/what-is-considered-an-older-home-247609
